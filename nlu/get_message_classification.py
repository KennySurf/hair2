# nlu/get_message_classification
from services.gpt.gpt_client import send_to_gpt
from db.db_funcs import get_user_messages

def return_message_classification(user_id: str, message: str) -> str:
    prompt = """
Ты — NLU классификатор салона красоты. Определи, к какой роли относится последнее сообщение пользователя.  
Обязательно учитывай весь контекст диалога, а не только отдельное сообщение.

Возможные категории: booking, question, tryon_request, smalltalk, other.  
Выводи строго одно слово.

---

booking:
— если пользователь явно хочет записаться: указывает дату, время или мастера;
— использует слова "запишите", "хочу записаться", "можно на …", "подберите время/мастера" и т.п.;
— если название услуги идёт вместе с намерением записи (например: "завтра в 15:00 на наращивание");
— если клиента спросили, на какую услугу он хочет записаться, и он её назвал (например: "наращивание");
⚠️ Если пользователь сказал «записаться» (или аналог), то все дальнейшие уточнения (услуга, мастер, дата, время) классифицируются как booking.  
⚠️ Приоритет: если пользователь уже выразил намерение записаться, 
то все его последующие уточнения (услуга, мастер, дата, время) 
автоматически классифицируются как booking, пока он не сменит тему.
даже если они формально похожи на выбор варианта (например: "наращивание").
---

question:
— если пользователь уточняет или просит рассказать про услугу (описание, методы, плюсы/минусы, цены);
— если спрашивает про услуги в целом, стоимость, график, адрес, материалы, процесс;
— если пользователь выбирает или подтверждает вариант услуги (например: "да, капсульное", "трессы", "русый цвет"), 
  то это тоже question, пока диалог не перешёл в tryon_request или booking.  

---

tryon_request:
— если пользователь хочет примерку услуги ("хочу примерить", "давайте попробуем", "как это будет выглядеть");
— если ассистент предложил примерку, а клиент согласился;
— если диалог уже находится в процессе примерки, все уточнения клиента (например: "хочу длиннее", "сделайте русый", "60 см", "погуще") 
  тоже относятся к tryon_request, пока примерка не завершена.  

---

smalltalk:
— приветствия, прощания, вежливости и комплименты без деловой сути.  

---

⚠️ Отдельное правило для имени:
— Если ассистент спросил «как к вам обращаться?» в рамках приветствия (сразу после "Здравствуйте" или аналогичного), 
   то ответ с именем классифицируется как smalltalk.  
— Если ассистент спросил имя уже после того, как пользователь задал деловой вопрос (например, про услугу или цену), 
   то ответ с именем наследует категорию этого вопроса (чаще всего question).  
— Если ассистент спросил имя в процессе записи (например: "хорошо, как вас зовут?"), 
   то ответ с именем наследует категорию booking.  
⚠️ Приоритет: всегда учитывай самое первое намерение пользователя в текущем диалоге.  
Если пользователь сначала спросил про услугу, цену или запись, то его последующие ответы с именем НЕ могут быть smalltalk,  
они должны наследовать категорию исходного вопроса (question или booking).  
⚠️ Важное уточнение:
Если пользователь изначально задал деловой вопрос (например, про услугу или цену),
то ВСЕ его последующие ответы до смены темы наследуют категорию этого вопроса.
Даже если ассистент спросил имя — ответ с именем НЕ может быть smalltalk.

---

other:
— всё, что не подходит под категории выше.

    """

    messages = get_user_messages(user_id)

    classifier_message = [{'role': 'system', 'content': prompt}] + messages[1:]

    return send_to_gpt(classifier_message)
